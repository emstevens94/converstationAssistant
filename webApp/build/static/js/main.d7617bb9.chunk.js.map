{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","DisplayConversationHistory","props","dialogHistory","map","dialog","user","timeClass","containerClass","class","text","time","App","state","userInput","handleNewUserInput","bind","changeText","event","this","setState","target","value","preventDefault","dialogTree","push","moment","format","console","log","params","sendUserInput","method","body","JSON","stringify","headers","mode","fetch","then","response","catch","err","document","getElementById","alert","onSubmit","type","id","placeholder","name","onChange","getTextInputForm","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,iLCK3C,SAASC,EAA2BC,GAmBlC,OAlBuBA,EAAMC,cAAcC,KAAI,SAASC,GACtD,GAAIA,EAAOC,KACT,IAAIC,EAAY,aACZC,EAAiB,sBAEjBD,EAAY,YACZC,EAAiB,mBAGvB,OACa,OAAXH,EAAkB,KAClB,yBAAKI,MAAOD,GACV,2BAAIH,EAAOK,MACX,0BAAMD,MAAOF,GAAYF,EAAOM,U,IA0FzBC,E,YAjFb,WAAYV,GAAQ,IAAD,8BACjB,4CAAMA,KAEDW,MAAQ,CACXV,cAAe,CAAC,CAACG,MAAM,EAAOK,KAAM,QAASD,KAAM,gBACnD,CAACJ,MAAM,EAAMK,KAAM,QAASD,KAAM,mBAClCI,UAAW,IAEb,EAAKC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBATD,E,wEAaRE,GACTC,KAAKC,SAAS,CAACN,UAAWI,EAAMG,OAAOC,U,yCAGtBJ,GAGjB,GAFAA,EAAMK,iBAEuB,KAAzBJ,KAAKN,MAAMC,UAAkB,CAC/B,IAAIU,EAAaL,KAAKN,MAAMV,cAC5BqB,EAAWC,KAAK,CAACf,KAAMS,KAAKN,MAAMC,UAAWH,KAAMe,MAASC,OAAO,2BAA4BrB,MAAM,IAErGsB,QAAQC,IAAIV,KAAKN,MAAMC,WACvB,IAAIgB,EAAS,CAAChB,UAAWK,KAAKN,MAAMC,WAShCiB,EAAgB,CACpBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUL,GACrBM,QAAS,CACP,eAAe,mCAEjBC,KAAM,WAGNC,MAhBe,+GAgBCP,GAAeQ,MAAK,SAAAC,GAAQ,OAAIZ,QAAQC,IAAI,yBAA0BW,MAAWC,OAAM,SAAAC,GAAG,OAAId,QAAQC,IAAI,iCAAkCa,MAE5JvB,KAAKC,SAAU,CAACjB,cAAeqB,EAAYV,UAAW,KACxC6B,SAASC,eAAe,aAC9BtB,MAAQ,QAEhBuB,MAAM,sB,yCAKR,OACE,0BAAMC,SAAU3B,KAAKJ,oBACnB,yBAAKN,MAAM,cACT,2BAAOsC,KAAK,OAAOtC,MAAM,eAAeuC,GAAG,YAAYC,YAAY,kBAAkBC,KAAK,QAAQC,SAAUhC,KAAKF,cAEnH,6BACE,2BAAOR,MAAM,kBAAkBsC,KAAK,SAASzB,MAAM,a,+BAOzD,OACE,8BAEE,6CAEA,kBAACrB,EAAD,CAA4BE,cAAegB,KAAKN,MAAMV,gBAErDgB,KAAKiC,wB,GA3EIC,IAAMC,WCfJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlB,SAASC,eAAe,SD2H3C,kBAAmBkB,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.d7617bb9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport moment from 'moment-timezone';\n\nfunction DisplayConversationHistory(props) {\n  var conversationTree = props.dialogHistory.map(function(dialog) {\n    if (dialog.user) {\n      var timeClass = \"time-right\"\n      var containerClass = \"container user\";\n    } else {\n      var timeClass = \"time-left\";\n      var containerClass = \"container watson\";\n    }\n\n    return (\n      dialog === null ? null :\n      <div class={containerClass}>\n        <p>{dialog.text}</p>\n        <span class={timeClass}>{dialog.time}</span>\n      </div>\n    );\n  });\n\n  return conversationTree;\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dialogHistory: [{user: false, time: '11:11', text: 'Hello World!'},\n      {user: true, time: '11:15', text: 'Sup computer?!'}],\n      userInput: ''\n    }\n    this.handleNewUserInput = this.handleNewUserInput.bind(this);\n    this.changeText = this.changeText.bind(this);\n\n  }\n\n  changeText(event) {\n    this.setState({userInput: event.target.value});\n  }\n\n  handleNewUserInput(event) {\n    event.preventDefault();\n\n    if (this.state.userInput !== '') {\n      var dialogTree = this.state.dialogHistory;\n      dialogTree.push({text: this.state.userInput, time: moment().format('MMMM Do YYYY, h:mm:ss a'), user: true});\n\n      console.log(this.state.userInput);\n      var params = {userInput: this.state.userInput};\n\n      var endpoint = \"https://d0jddvy321.execute-api.us-east-2.amazonaws.com/initialCommunicator/conversationassistantcommunicator\";\n    //   var sendUserInput = new Request(endpoint, {\n    //     method: 'POST',\n    //     mode: 'no-cors',\n    //     body: JSON.stringify(params)\n    // });\n\n    const sendUserInput = {\n      method: \"POST\",\n      body: JSON.stringify(params),\n      headers: {\n        \"content-type\":\"applicatoin/json; charset=UTF-8\"\n      },\n      mode: 'no-cors'\n    }\n\n      fetch(endpoint, sendUserInput).then(response => console.log(\"Response from lambda: \", response)).catch(err => console.log(\"Error sending data to lambda: \", err));\n\n      this.setState( {dialogHistory: dialogTree, userInput: ''} );\n      var textbox = document.getElementById('userInput');\n      textbox.value = '';\n    } else {\n      alert(\"No Text Detected\");\n    }\n  }\n\n  getTextInputForm() {\n    return (\n      <form onSubmit={this.handleNewUserInput}>\n        <div class=\"form-group\">\n          <input type=\"text\" class=\"form-control\" id=\"userInput\" placeholder=\"Enter Text Here\" name=\"input\" onChange={this.changeText}/>\n        </div>\n        <div>\n          <input class=\"btn btn-success\" type=\"submit\" value=\"Send\"/>\n        </div>\n      </form>\n    );\n  }\n\n  render () {\n    return (\n      <body>\n\n        <h2>Chat Messages</h2>\n\n        <DisplayConversationHistory dialogHistory={this.state.dialogHistory}/>\n\n        {this.getTextInputForm()}\n\n      </body>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}